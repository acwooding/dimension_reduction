# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.0
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Get latest Anaconda running
      - run:
          command: |
            wget -q http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh;
            chmod +x ~/miniconda.sh;
            ~/miniconda.sh -b -p ~/miniconda;
            echo "export PATH=~/miniconda/bin:$PATH" >> $BASH_ENV;
      - run:
          command: |
            conda update --yes --quiet conda;
            conda env create --quiet -f environment.yml;
            source activate dimension_reduction;
            echo "source activate dimension_reduction" >> $BASH_ENV;

      - save_cache:
          key: pip-cache
          paths:
            - ~/.cache/pip

      # Download and cache dependencies
      - restore_cache:
          keys:
              - pip-cache

        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            source activate dimension_reduction
            #. venv/bin/activate
            #python manage.py test
            cd src
            pytest --doctest-modules --doctest-continue-on-failure --verbose

      - store_artifacts:
          path: test-reports
          destination: test-reports
          
